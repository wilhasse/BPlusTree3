{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(cargo test)",
      "Bash(cargo clippy:*)",
      "Bash(cargo test:*)",
      "Bash(git commit:*)",
      "Bash(cargo:*)",
      "Bash(rg:*)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"LeafFinder::new\" --line-number)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"find_leaf_with_path\" --line-number -B2 -A2)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"trait Node\" -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"struct BranchNode\" -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"BranchNode::new\" -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"impl.*Node.*for LeafNode\" -n)",
      "Bash(mkdir:*)",
      "Bash(python -m pytest test_bplus_tree.py -v)",
      "Bash(git reset:*)",
      "Bash(python -m pytest test_bplus_tree.py::TestSetItemSplitting::test_overflow -v)",
      "Bash(python3:*)",
      "Bash(python -m pytest test_bplus_tree.py::TestSetItemSplitting::test_split_then_add -v)",
      "Bash(python -m pytest test_bplus_tree.py::TestBPlusTreeMap::test_split_then_add -xvs)",
      "Bash(python -m pytest test_bplus_tree.py -k test_split_then_add -xvs)",
      "Bash(python -m pytest test_bplus_tree.py -xvs)",
      "Bash(python:*)",
      "Bash(grep:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(git rm:*)",
      "Bash(git checkout:*)",
      "Bash(mv:*)",
      "Bash(for f in *.py)",
      "Bash(do if [ \"$f\" != \"__init__.py\" ])",
      "Bash(then sed -i '' 's/from bplus_tree import/from ..bplus_tree import/g' \"$f\")",
      "Bash(sed:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(tree:*)",
      "Bash(pip install:*)",
      "Bash(awk:*)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -A5 \"fn get_leaf\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -B2 \"impl.*ItemIterator\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -B5 \"fn collect_items\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -B5 -A5 \"fn range.*RangeIterator\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -A10 \"pub fn range\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -B5 \"fn items_range\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -B10 -A5 \"items_range.*RangeIterator\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"arena_\" --type rust src/)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"pub fn (merge_with_right|borrow_from_left|borrow_from_right)\\(\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"borrow_from_left|borrow_from_right|merge_with_right\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"leaf\\.(borrow_from_left|borrow_from_right|merge_with_right)\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"remove_and_check_rebalancing\" src/lib.rs -n)",
      "Bash(RUSTFLAGS=\"-D dead_code\" cargo build 2 >& 1)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"pub fn (borrow_from_left|borrow_from_right|merge_with_right|remove_and_check_rebalancing|len|leaf_count|find_first_leaf_id)\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"\\.borrow_from_left\\(|\\.borrow_from_right\\(|\\.remove_and_check_rebalancing\\(\" src/ tests/ benches/ examples/)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"LeafNode.*::(borrow_from_left|borrow_from_right|merge_with_right|remove_and_check_rebalancing)\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"\\.len\\(\\)|\\.leaf_count\\(\\)|\\.find_first_leaf_id\\(\\)\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"tree\\.len\\(\\)|tree\\.leaf_count\\(\\)\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"BranchNode.*\\.len\\(\\)|BranchNode.*\\.leaf_count\\(\\)\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"find_first_leaf_id\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"leaf\\.len\\(\\)\" --type rust .)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B 10 -A 10 \"Always insert first, then check if split is needed\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -B 10 -A 10 \"insert_at_index|children.insert\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"fn add_child.*InsertResult\" -A 30 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"insert_child_at.*then check\" -B 10 -A 10 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"fn insert_child\" -A 30 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"is_full\\(\\)\" -B 2 -A 5 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"min_keys|capacity\" -B 2 -A 2 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"next_leaf|prev_leaf|next:|prev:\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"InsertResult::Split.*Leaf\" -B 5 -A 10 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"SplitNodeData::Leaf\" -B 10 -A 10 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"allocate_leaf.*new_leaf_data\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"merge.*leaf|merge_with_right\" -B 5 -A 10 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"deallocate_leaf\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"pub fn leaf_count\" -B 5 -A 5 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"remove_and_check_rebalancing|borrow_from_left|borrow_from_right|merge_with_right\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"struct ItemIterator\" -A 20 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"pub fn validate\" -A 30 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"fn check_invariants_detailed\" -A 50 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"fn check_node_invariants\" -A 100 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"for branching_factor in\" tests/fuzz_tests.rs)",
      "Bash(open:*)",
      "Bash(ls:*)",
      "Bash(LLVM_PROFILE_FILE=\"target/llvm-cov/fuzz-%p-%m.profraw\" cargo test --test fuzz_tests -- --ignored --test-threads=1)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"if let Some.*= self\\.get_leaf\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"(borrow_from_left|borrow_from_right|merge_with_left|merge_with_right)\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"trait RebalanceableNode\" src/lib.rs -n -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"impl.*RebalanceableNode\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"\\.can_donate\\(\\)|\\.is_underfull\\(\\)\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some\\(.*\\) = self\\.get_(branch|leaf)\" src/lib.rs -n -A 8)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"} else \\{\\s*None\\s*\\}\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some.*get_branch.*\\{\" src/lib.rs -n -A 10)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some\\(.*\\) = self\\.get_(branch|leaf).*\\{\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some.*self\\.get_\" src/lib.rs -n)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"\\.can_donate\\(\\)\" src/lib.rs -n -B 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some.*= self\\.get_(leaf|branch)_mut.*\\{\" src/lib.rs -n -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some.*self\\.get_leaf_mut\" src/lib.rs -n -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"return None.*Invalid\" src/lib.rs -n -B 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some.*self\\.get_branch_mut\" src/lib.rs -n -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"let removed = if let Some\" src/lib.rs -n -A 3)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if child_index < branch\\.children\\.len\\(\\)\" src/lib.rs -n -B 3 -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some\\(left_branch\\) = self\\.get_branch\\(\\*left_id\\)\" src/lib.rs -n -B 10 -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if let Some\\(right_branch\\) = self\\.get_branch\\(\\*right_id\\)\" src/lib.rs -n -B 10 -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"NodeRef::Leaf\\(child, _\\), NodeRef::Leaf\\(right, _\\)\" src/lib.rs -n -B 5 -A 5)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"} else \\{\\s*None\\s*\\}\\s*} else \\{\\s*None\\s*\\}\" src/lib.rs -n -B 10 -A 2)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"} else \\{\" src/lib.rs -n -A 3)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg \"if.*Some.*= \" src/lib.rs -n)",
      "Bash(brew install:*)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"if let Some.*else.*false\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n \"fn get_mut_in_branch\" -A 15 src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -A 15 \"branch.children.get(child_index).and_then\" src/lib.rs)",
      "Bash(/Users/kentb/.npm-global/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/arm64-darwin/rg -n -A 20 \"if let Some\\\\(branch\\\\) = self\\\\.get_branch_mut\\\\(id\\\\)\" src/lib.rs)",
      "Bash(rustc:*)",
      "Bash(./test_optimized_range)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(touch:*)",
      "Bash(coverage run -m pytest:*)",
      "Bash(coverage report:*)",
      "WebFetch(domain:github.com)",
      "Bash(diff:*)",
      "Bash(chmod:*)",
      "Bash(./test_versions.sh:*)",
      "Bash(RUST_BACKTRACE=1 cargo test test_free_list_corruption_attack -- --exact --nocapture 2 >& 1)",
      "Bash(./test_free_list_issue)",
      "Bash(cat:*)",
      "Bash(make test:*)",
      "Bash(make:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}